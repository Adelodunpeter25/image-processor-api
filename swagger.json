{
  "swagger": "2.0",
  "info": {
    "title": "Image Processor API",
    "description": "API for image upload, transformation, and management",
    "version": "1.0.0"
  },
  "host": "",
  "basePath": "/api",
  "schemes": [],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'"
    },
    "ApiKey": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header",
      "description": "API Key for authentication. Example: 'sk_live_abc123...'"
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["Home"],
        "summary": "Home route",
        "responses": {
          "200": { "description": "Home page accessed successfully" }
        }
      },
      "head": {
        "tags": ["Home"],
        "summary": "Home route HEAD request",
        "responses": {
          "200": { "description": "Home page accessed successfully" }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["System"],
        "summary": "Health check endpoint",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "schema": {
              "type": "object",
              "properties": {
                "status": {"type": "string", "example": "healthy"},
                "service": {"type": "string", "example": "Image Processor API"},
                "environment": {"type": "string", "example": "development"}
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["email", "password"],
              "properties": {
                "email": { "type": "string", "example": "user@example.com" },
                "password": { "type": "string", "example": "password123" }
              }
            }
          }
        ],
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Validation error" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login and get JWT token",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["email", "password"],
              "properties": {
                "email": { "type": "string", "example": "user@example.com" },
                "password": { "type": "string", "example": "password123" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Login successful" },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/auth/api-keys": {
      "post": {
        "tags": ["API Keys"],
        "summary": "Generate new API key",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["name"],
              "properties": {
                "name": {"type": "string", "example": "Production Server"}
              }
            }
          }
        ],
        "responses": {
          "201": {"description": "API key created successfully"},
          "400": {"description": "Invalid request"}
        }
      },
      "get": {
        "tags": ["API Keys"],
        "summary": "List all API keys",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "responses": {
          "200": {"description": "List of API keys"}
        }
      }
    },
    "/auth/api-keys/{key_id}": {
      "delete": {
        "tags": ["API Keys"],
        "summary": "Revoke API key",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "path", "name": "key_id", "type": "integer", "required": true}
        ],
        "responses": {
          "200": {"description": "API key revoked"},
          "404": {"description": "API key not found"}
        }
      }
    },
    "/images/upload": {
      "post": {
        "tags": ["Images"],
        "summary": "Upload an image",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "required": true,
            "description": "Image file (png, jpg, jpeg, gif, webp)"
          }
        ],
        "responses": {
          "201": { "description": "Image uploaded successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/images/{image_id}": {
      "get": {
        "tags": ["Images"],
        "summary": "Get original image",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "parameters": [
          { "in": "path", "name": "image_id", "type": "integer", "required": true },
          { "in": "query", "name": "download", "type": "boolean", "default": false }
        ],
        "responses": {
          "200": { "description": "Image file" },
          "404": { "description": "Image not found" }
        }
      },
      "delete": {
        "tags": ["Images"],
        "summary": "Delete an image",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "parameters": [
          { "in": "path", "name": "image_id", "type": "integer", "required": true }
        ],
        "responses": {
          "200": { "description": "Image deleted successfully" },
          "404": { "description": "Image not found" }
        }
      }
    },
    "/images/{image_id}/transform": {
      "get": {
        "tags": ["Images"],
        "summary": "Transform an image",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "parameters": [
          { "in": "path", "name": "image_id", "type": "integer", "required": true },
          { "in": "query", "name": "width", "type": "integer" },
          { "in": "query", "name": "height", "type": "integer" },
          { "in": "query", "name": "format", "type": "string", "enum": ["jpeg", "png", "webp"] },
          { "in": "query", "name": "quality", "type": "integer", "default": 85 },
          { "in": "query", "name": "crop_x", "type": "integer" },
          { "in": "query", "name": "crop_y", "type": "integer" },
          { "in": "query", "name": "crop_width", "type": "integer" },
          { "in": "query", "name": "crop_height", "type": "integer" },
          { "in": "query", "name": "rotate", "type": "integer", "enum": [90, 180, 270] },
          { "in": "query", "name": "watermark", "type": "string" },
          { "in": "query", "name": "optimize", "type": "boolean" },
          { "in": "query", "name": "enhance", "type": "boolean" },
          { "in": "query", "name": "compress", "type": "boolean" },
          { "in": "query", "name": "grayscale", "type": "boolean" },
          { "in": "query", "name": "download", "type": "boolean", "default": false }
        ],
        "responses": {
          "200": { "description": "Transformed image" },
          "404": { "description": "Image not found" }
        }
      }
    },
    "/images/{image_id}/thumbnail": {
      "get": {
        "tags": ["Images"],
        "summary": "Generate thumbnail",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "parameters": [
          { "in": "path", "name": "image_id", "type": "integer", "required": true },
          { "in": "query", "name": "size", "type": "string", "default": "150x150" },
          { "in": "query", "name": "download", "type": "boolean", "default": false }
        ],
        "responses": {
          "200": { "description": "Thumbnail image" },
          "404": { "description": "Image not found" }
        }
      }
    },
    "/images/{image_id}/remove-background": {
      "get": {
        "tags": ["Images"],
        "summary": "Remove background from image",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "parameters": [
          { "in": "path", "name": "image_id", "type": "integer", "required": true },
          { "in": "query", "name": "format", "type": "string", "enum": ["png", "webp"] },
          { "in": "query", "name": "download", "type": "boolean", "default": false }
        ],
        "responses": {
          "200": { "description": "Image with background removed" },
          "404": { "description": "Image not found" }
        }
      }
    },
    "/images": {
      "get": {
        "tags": ["Images"],
        "summary": "List all user images",
        "security": [{ "Bearer": [] }, { "ApiKey": [] }],
        "responses": {
          "200": { "description": "List of images" }
        }
      }
    },
    "/batch/upload": {
      "post": {
        "tags": ["Batch Processing"],
        "summary": "Upload multiple images at once",
        "description": "Note: Swagger UI does not support testing multiple file uploads. Use curl or Postman instead.",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "consumes": ["multipart/form-data"],
        "parameters": [
          {"in": "formData", "name": "files", "type": "file", "required": true, "description": "Multiple image files (max 10)"}
        ],
        "responses": {
          "201": {"description": "Images uploaded successfully"},
          "400": {"description": "Invalid request"}
        }
      }
    },
    "/batch/transform": {
      "post": {
        "tags": ["Batch Processing"],
        "summary": "Apply same transformation to multiple images",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "body", "name": "body", "required": true, "schema": {
            "type": "object",
            "required": ["image_ids"],
            "properties": {
              "image_ids": {"type": "array", "items": {"type": "integer"}, "description": "Array of image IDs (max 10)"},
              "width": {"type": "integer"},
              "height": {"type": "integer"},
              "format": {"type": "string", "enum": ["jpeg", "png", "webp"]},
              "quality": {"type": "integer", "minimum": 1, "maximum": 100},
              "rotate": {"type": "integer", "enum": [90, 180, 270]},
              "watermark": {"type": "string"},
              "optimize": {"type": "boolean"},
              "enhance": {"type": "boolean"},
              "compress": {"type": "boolean"},
              "grayscale": {"type": "boolean"}
            }
          }}
        ],
        "responses": {
          "200": {"description": "ZIP file with transformed images"},
          "400": {"description": "Invalid request"}
        }
      }
    },
    "/batch/remove-background": {
      "post": {
        "tags": ["Batch Processing"],
        "summary": "Remove background from multiple images",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "body", "name": "body", "required": true, "schema": {
            "type": "object",
            "required": ["image_ids"],
            "properties": {
              "image_ids": {"type": "array", "items": {"type": "integer"}, "description": "Array of image IDs (max 10)"},
              "format": {"type": "string", "enum": ["png", "webp"], "default": "png"}
            }
          }}
        ],
        "responses": {
          "200": {"description": "ZIP file with background removed images"},
          "400": {"description": "Invalid request"}
        }
      }
    },
    "/presets": {
      "post": {
        "tags": ["Presets"],
        "summary": "Create a new transformation preset",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "body", "name": "body", "required": true, "schema": {
            "type": "object",
            "required": ["name"],
            "properties": {
              "name": {"type": "string", "example": "Instagram Square"},
              "description": {"type": "string", "example": "Perfect square for Instagram posts"},
              "is_public": {"type": "boolean", "default": false},
              "width": {"type": "integer"},
              "height": {"type": "integer"},
              "format": {"type": "string", "enum": ["jpeg", "png", "webp"]},
              "quality": {"type": "integer", "minimum": 1, "maximum": 100},
              "crop_x": {"type": "integer"},
              "crop_y": {"type": "integer"},
              "crop_width": {"type": "integer"},
              "crop_height": {"type": "integer"},
              "rotate": {"type": "integer", "enum": [90, 180, 270]},
              "watermark": {"type": "string"},
              "optimize": {"type": "boolean"},
              "enhance": {"type": "boolean"},
              "compress": {"type": "boolean"},
              "grayscale": {"type": "boolean"}
            }
          }}
        ],
        "responses": {
          "201": {"description": "Preset created successfully"},
          "400": {"description": "Invalid request"}
        }
      },
      "get": {
        "tags": ["Presets"],
        "summary": "List all presets (own + public)",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "responses": {
          "200": {"description": "List of presets"}
        }
      }
    },
    "/presets/{preset_id}": {
      "get": {
        "tags": ["Presets"],
        "summary": "Get a specific preset",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "path", "name": "preset_id", "type": "integer", "required": true}
        ],
        "responses": {
          "200": {"description": "Preset details"},
          "404": {"description": "Preset not found"}
        }
      },
      "put": {
        "tags": ["Presets"],
        "summary": "Update a preset",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "path", "name": "preset_id", "type": "integer", "required": true},
          {"in": "body", "name": "body", "schema": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "description": {"type": "string"},
              "is_public": {"type": "boolean"},
              "width": {"type": "integer"},
              "height": {"type": "integer"},
              "format": {"type": "string"},
              "quality": {"type": "integer"},
              "rotate": {"type": "integer"},
              "watermark": {"type": "string"},
              "optimize": {"type": "boolean"},
              "enhance": {"type": "boolean"},
              "compress": {"type": "boolean"},
              "grayscale": {"type": "boolean"}
            }
          }}
        ],
        "responses": {
          "200": {"description": "Preset updated successfully"},
          "404": {"description": "Preset not found"}
        }
      },
      "delete": {
        "tags": ["Presets"],
        "summary": "Delete a preset",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "path", "name": "preset_id", "type": "integer", "required": true}
        ],
        "responses": {
          "200": {"description": "Preset deleted successfully"},
          "404": {"description": "Preset not found"}
        }
      }
    },
    "/presets/{preset_id}/apply/{image_id}": {
      "get": {
        "tags": ["Presets"],
        "summary": "Apply preset to an image",
        "security": [{"Bearer": []}, {"ApiKey": []}],
        "parameters": [
          {"in": "path", "name": "preset_id", "type": "integer", "required": true},
          {"in": "path", "name": "image_id", "type": "integer", "required": true},
          {"in": "query", "name": "download", "type": "boolean", "default": false}
        ],
        "responses": {
          "200": {"description": "Transformed image with preset applied"},
          "404": {"description": "Preset or image not found"}
        }
      }
    }
  }
}
